---
- name: Deploy application on Azure VM
  hosts: azure_vm
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
  tasks:
    - name: Update package index files
      apt:
        update_cache: yes
        cache_valid_time: 3600

      - name: Find existing docker GPG key
        find:
          paths: /etc/apt/trusted.gpg.d
          patterns: 'docker*.gpg'
        register: existing_docker_gpg_keys

      - name: Remove existing docker GPG key
        file:
          path: "{{ item.path }}"
          state: absent
        with_items: "{{ existing_docker_gpg_keys.files }}"



    - name: Install required packages
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present

    - name: Create /etc/apt/keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list

    - name: Update package index files
      apt:
        update_cache: yes

    - name: Install Docker Engine, containerd, and Docker Compose
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Pull Docker images
      docker_image:
        name: "{{ item }}"
      source: pull
      with_items:
        - martmich/todoappwithlogin:latest
        - mysql:5


    - name: Create Docker network
      docker_network:
        name: app_network

    - name: Start MySQL container
      docker_container:
        name: mysql_container
        image: mysql:5
        state: started
        restart_policy: always
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: todos
        networks:
          - name: app_network

    - name: Wait for MySQL to be ready
      wait_for:
        host: "{{ ansible_host }}"
        port: 3306
        delay: 10
        timeout: 120

    - name: Start Web Application container
      docker_container:
        name: webapp_container
        image: martmich/todoappwithlogin:latest
        state: started
        restart_policy: always
        env:
          DB_HOST: mysql_container
          DB_PORT: 3306
          DB_USER: "{{ db_user }}"
          DB_USER_PASSWORD: "{{ db_user_password }}"
        ports:
          - "8080:8080"
        networks:
          - name: app_network